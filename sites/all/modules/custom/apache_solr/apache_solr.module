<?php
/**
 * @package Apache Solr indexing for searching
 * @copyright Umang Gupta
 * @author Umang
 * @method create
 * @method update
 * @method delete
 * @method index
 */
define('HOST', '127.0.0.1');
define('PORT','8984');
define('CORE0','core0');
define('DRUPAL_ROOT', getcwd());
/**
 * Implement hook_menu()
 */
function apache_solr_menu() {
	$item = array();
	$item['solr/index'] = array(
			'title'=>t('Solr Index'),
			'description'=>t('Solr indexing'),
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('index'),
			'access arguments'=>array('access administration pages'),
			'type'=>MENU_CALLBACK,
	);
	$item['solr/search'] = array(
			'title'=>t('Solr Search'),
			'description'=>t('Solr Searching'),
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('search'),
			'access arguments'=>array('access content'),
			'type'=>MENU_CALLBACK,
	);
	
	$item['solr/callback/autocomplete'] = array(
			'page callback'=>'solrautocomplete',
			'access arguments'=>array('access content'),
			'type'=>MENU_CALLBACK,
	);
	
	return $item;
}

function index($form,&$form_state) {
	$form = array();
	$form['index_option'] = array(
			'#type'=>'select',
			'#required'=> TRUE,
			'#options'=>array('create'=>'Create','update'=>'Update','delete'=>'Delete'),
	);
	$form['create_submit'] = array(
			'#type'=>'submit',
			'#value'=>'create',
	);
	return $form;
}
function index_submit($form,&$form_state) {
	$value = $form_state['values']['index_option'];
	if($value == "create") {
		create();
	}
	if($value == "update") {
		update();
	}
	if($value == "delete") {
		delete();
	}
}
function create(){
	$options = array
	(
			'hostname' => HOST,
			'port'     => PORT,
			'path'	   =>'/solr/'.CORE0,	
	);
	
	$solr = new SolrClient($options);
	if(!$solr->ping()){
		drupal_set_message('Server not connected');
	}
	else{
		drupal_set_message('Server connected');
	}
	
	try{
		$query = db_query("select * from {user_data}");
		$docs = array();
		foreach($query as $result) {
			$doc = new SolrInputDocument();
			$doc->addField('id', $result->id);
			$doc->addField('fname', $result->first_name);
			$doc->addField('lname',$result->last_name);
			$doc->addField('email',$result->email);
			$doc->addField('city',$result->city);
			$doc->addField('state',$result->state);
			$doc->addField('country',$result->country);
			$doc->addField('zip',$result->zip);
			$doc->addField('text',$result->phone1);
			$doc->addField('text',$result->address);
			$doc->addField('text',$result->phone2);
			$doc->addField('company',$result->company_name);
			array_push($docs,$doc);
		}
		$updateResponse = $solr->addDocuments($docs);
		$solr->commit();
		drupal_set_message("Index created");
	}
	catch (Exception $e) {
		drupal_set_message($e->getMessage(),'error');
	}
}

function update(){
	drupal_set_message("Update Index successfully");
}
function delete(){
	$options = array
	(
			'hostname' => HOST,
			'port'     => PORT,
			'path'	   =>'/solr/'.CORE0,
	);
	
	$solr = new SolrClient($options);
	if(!$solr->ping()){
		drupal_set_message('Server not connected');
	}
	else{
		drupal_set_message('Server connected');
	}
	$solr->deleteByQuery("*:*");
	$solr->commit();
	drupal_set_message("Document deleted");
}

function search(){
	//drupal_add_js(drupal_get_path('module','apache_solr').'/solr_autocomplete.js','file');
	$form = array();
	$form['index_text'] = array(
			'#type'=>'textfield',
			'#attributes'=>array('placholder'=>'Search Text Here'),
			'#id'=>'solr_text',
			'#autocomplete_path'=>'solr/callback/autocomplete',
	);
	return $form;
}

function solrautocomplete($text) {
	$term = $text;//$_GET['term'];
	$options = array
	(
			'hostname' => HOST,
			'port'     => PORT,
			'path'	   =>'/solr/'.CORE0,
	);
	$solr = new SolrClient($options);
	$solr->setServlet(SolrClient::SEARCH_SERVLET_TYPE,'spell');
	$solrQuery = new SolrQuery();
	$solrQuery->set('spellcheck','true');
	$solrQuery->setQuery($term);
	$query_response = $solr->query($solrQuery);
	$response = $query_response->getResponse();
	$result = $response->spellcheck->suggestions->$term->suggestion;
	//print_r($response->spellcheck->suggestions->$term->suggestion);
	$array = array();
	foreach ($result as $key => $value) {
		$array[$value->word] = $value->word;
	}
	return drupal_json_output($array);
}
